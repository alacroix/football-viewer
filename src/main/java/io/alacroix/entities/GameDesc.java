package io.alacroix.entities;import com.fasterxml.jackson.core.JsonFactory;import com.fasterxml.jackson.core.JsonParser;import com.fasterxml.jackson.core.JsonToken;import java.io.File;import java.io.IOException;import java.util.HashMap;import java.util.Map;/** * * * @author Adrien Lacroix * @version 0.1.0 */public class GameDesc {    private JsonParser parser;    private JsonToken token;    private Map<Integer, Team> teams;    private Map<Integer, Player> players;	public GameDesc(String pathGameDesc) {        teams = new HashMap<>(3);        players = new HashMap<>(23);        try {            // get an instance of the json parser from the json factory            JsonFactory factory = new JsonFactory();            parser = factory.createParser(new File(pathGameDesc));            // continue parsing the token till the end of input is reached            if (!parser.isClosed()) {                token = parser.nextToken();                // if its the last token or not a start object then we are done                if (token == null || !JsonToken.START_OBJECT.equals(token)) {                    throw new IllegalArgumentException("Invalid input JSON file");                }                // get teams                token = parser.nextToken();                if (!parseTeams()) {                    throw new IllegalArgumentException("Failed to get teams");                }                token = parser.nextToken();                if (!parsePlayers()) {                    throw new IllegalArgumentException("Failed to get players");                }            }            // we are done here            parser.close();        } catch (IOException e) {            throw new IllegalArgumentException("Invalid file");        }	}    private boolean parseTeams() throws IOException {        if (JsonToken.FIELD_NAME.equals(token) && "teams".equals(parser.getCurrentName())) {            // we are entering the teams now. The first token should be            // start of object            token = parser.nextToken();            if (!JsonToken.START_OBJECT.equals(token)) {                // bail out                return false;            }            token = parser.nextToken();            while (!JsonToken.END_OBJECT.equals(token)) {                Team t = new Team();                // get team's id                try {                    t.setId(Integer.parseInt(parser.getText()));                } catch (NumberFormatException e) {                    System.err.println("Invalid id for a team");                    return false;                }                // we are entering the team now. The first token should be                // start of object                token = parser.nextToken();                if (!JsonToken.START_OBJECT.equals(token)) {                    return false;                }                // get team's name                token = parser.nextToken();                if (JsonToken.FIELD_NAME.equals(token) && "name".equals(parser.getCurrentName())) {                    token = parser.nextToken();                    t.setName(parser.getText());                }                // get team's color                token = parser.nextToken();                if (JsonToken.FIELD_NAME.equals(token) && "color".equals(parser.getCurrentName())) {                    token = parser.nextToken();                    t.setColor(parser.getText());                }                System.out.println(t);                // we are exiting the team now. The last token should be                // end of object                token = parser.nextToken();                if (!JsonToken.END_OBJECT.equals(token)) {                    return false;                }                // add team                teams.put(t.getId(), t);                token = parser.nextToken();            }            // Everything ok            return true;        }        // Field teams missing        return false;    }    private boolean parsePlayers() throws IOException {        if (JsonToken.FIELD_NAME.equals(token) && "player".equals(parser.getCurrentName())) {            // we are entering the players now. The first token should be            // start of object            token = parser.nextToken();            if (!JsonToken.START_OBJECT.equals(token)) {                // bail out                return false;            }            token = parser.nextToken();            while (!JsonToken.END_OBJECT.equals(token)) {                Player p = new Player();                // get player's id                try {                    p.setId(Integer.parseInt(parser.getText()));                } catch (NumberFormatException e) {                    System.err.println("Invalid id for a player");                    return false;                }                // we are entering the team now. The first token should be                // start of object                token = parser.nextToken();                if (!JsonToken.START_OBJECT.equals(token)) {                    return false;                }                // get player team's id                token = parser.nextToken();                if (JsonToken.FIELD_NAME.equals(token) && "team".equals(parser.getCurrentName())) {                    token = parser.nextToken();                    try {                        int teamId = Integer.parseInt(parser.getText());                        if (!teams.containsKey(teamId)) {                            System.err.println("Invalid team id");                            return false;                        } else {                            p.setTeam(teams.get(teamId));                        }                    } catch (NumberFormatException e) {                        System.err.println("Invalid id for a team");                        return false;                    }                }                System.out.println(p);                // we are exiting the team now. The last token should be                // end of object                token = parser.nextToken();                if (!JsonToken.END_OBJECT.equals(token)) {                    return false;                }                // add player                players.put(p.getId(), p);                token = parser.nextToken();            }            // Everything ok            return true;        }        // Field player missing        return false;    }    public Map<Integer, Team> getTeams() {        return teams;    }    public Map<Integer, Player> getPlayers() {        return players;    }}